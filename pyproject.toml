[tool.poetry]
name = "apicache"
version = "0.1.0"
description = "Tiny Typer CLI that fetches an API and caches results in SQLite (SQLModel)"
readme = "README.md"
license = "MIT"
authors = ["Your Name <you@example.com>"]
packages = [{ include = "apicache", from = "src" }]
# Include typing marker
include = ["src/apicache/py.typed"]

[tool.poetry.scripts]
apicache = "apicache.cli:app"

[tool.poetry.dependencies]
python = "^3.10"
typer = "^0.12.0"
rich = "^13.7.0"
httpx = "^0.27.0"
sqlmodel = "^0.0.18"
sqlite-utils = "^3.36"
click = ">=8.1.0"

[tool.poetry.group.dev.dependencies]
pytest = "^8.3"
pytest-cov = "^5.0"
ruff = "^0.5.7"
black = "^24.8"
mypy = "^1.11"
types-requests = "^2.32"
respx = "^0.21.1"

[tool.ruff]
line-length = 100
target-version = "py310"

[tool.ruff.lint]
select = ["E", "F", "I", "B", "UP", "C4", "SIM", "N", "RUF"]
ignore = ["E501"]

[tool.ruff.lint.isort]
known-first-party = ["apicache"]

[tool.black]
line-length = 100
target-version = ["py310"]

[tool.mypy]
python_version = "3.10"
ignore_missing_imports = true
strict = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_return_any = true
warn_unused_configs = true
no_implicit_optional = true

[tool.pytest.ini_options]
minversion = "8.0"
addopts = "-ra -q --cov=apicache --cov-report=term-missing"
testpaths = ["tests"]

[tool.poetry.urls]
Homepage = "https://github.com/OWNER/REPO"
Repository = "https://github.com/OWNER/REPO"
Issues = "https://github.com/OWNER/REPO/issues"

[tool.poetry.classifiers]
# Trove classifiers (optional but nice on PyPI)
# E.g.: "Programming Language :: Python :: 3", "License :: OSI Approved :: MIT License"

[build-system]
requires = ["poetry-core>=1.8.0"]
build-backend = "poetry.core.masonry.api"
